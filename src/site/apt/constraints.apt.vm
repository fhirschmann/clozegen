Writing constraints

    ClozeGen provides a facility called <<<Constraint>>> which,
    when used, will call a Gap Generator for each word in a
    sentence matched by a <<<Constraint>>>. The following examples
    can also be found in in {{{/apidocs/com/github/fhirschmann/clozegen/lib/examples/ConstraintExample.html}lib.examples.ConstraintExample}}.

* Using generic Constraint Resources

    Chances are that there are already generic constraint
    resources for the task you're trying to accomplish available.
    You should check {{{/apidocs/com/github/fhirschmann/clozegen/lib/constraints/resources/package-summary.html}lib.constraints.resources}}
    in order to find out. Let's assume you want a constraint
    which matches all articles, then you'd simply use 
    {{{http://localhost:8080/apidocs/com/github/fhirschmann/clozegen/lib/constraints/resources/TypeConstraintResource.html}TypeConstraintResource}}
    like so:

%{snippet|id=constex1|file=lib/src/main/java/com/github/fhirschmann/clozegen/lib/examples/ConstraintExample.java}

    Since the argument to <<<PARAM_TYPE>>> is <<<ART.class.getName()>>>,
    the adapter for the generator (and thus the generator itself,
    given it is wired up correctly in the adapter) will be
    called for each article.

* Writing new Constraint Resources

    Of course, it is also possible to write new constraints.
    If you wish to do so, you have to write a class which
    extends {{{apidocs/com/github/fhirschmann/clozegen/lib/constraints/api/ConstraintResource.html}ConstraintResource}}. The
    <<<getConstraint(JCas jcas)>>> method then needs to return a valid
    {{{http://uima.apache.org/d/uimaj-2.4.0/apidocs/org/apache/uima/cas/class-use/FSMatchConstraint.html}FSMatchConstraint}}. Writing
    such constraints is out of the scope of this manual, so you
    should consult the UIMA manual for this task. There are however
    {{{/apidocs/com/github/fhirschmann/clozegen/lib/constraints/resources/package-summary.html}Constraint Resources}} available which
    might be a good point to start.
