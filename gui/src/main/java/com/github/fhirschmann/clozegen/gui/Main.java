/*
 * Copyright (c) 2012 Fabian Hirschmann <fabian@hirschm.net>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package com.github.fhirschmann.clozegen.gui;

import com.github.fhirschmann.clozegen.lib.ClozeTestGenerator;
import com.github.fhirschmann.clozegen.lib.imf.IntermediateFormat;
import com.github.fhirschmann.clozegen.lib.plugins.Plugins;
import java.awt.Component;
import java.io.File;
import java.util.concurrent.ExecutionException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import org.apache.uima.jcas.JCas;

/**
 * The main GUI entry point.
 *
 * @author Fabian Hirschmann <fabian@hirschm.net>
 */
public class Main extends javax.swing.JFrame {
    /**
     * Creates a new Main Form.
     */
    public Main() {
        initComponents();
        Plugins.load();
    }

    /**
     * Sets the progress bar to a "working-state" if {@code bool} is true.
     *
     * @param bool boolean
     */
    public void setIsWorking(final boolean bool) {
        if (bool) {
            progressBar.setIndeterminate(true);
        } else {
            progressBar.setValue(progressBar.getMinimum());
            progressBar.setIndeterminate(false);
        }
    }

    /**
     * Sets the progress bar to a "working-state" if {@code bool} is true.
     *
     * @param bool boolean
     * @param msg message to display
     */
    public void setIsWorking(final boolean bool, final String msg) {
        setIsWorking(bool);
        statusMessage.setText(msg);
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING:
     * Do NOT modify this code. The content of this method is always regenerated by the
     * Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        pane = new com.github.fhirschmann.clozegen.gui.ClozeTestPane();
        statusPanel = new javax.swing.JPanel();
        statusMessage = new javax.swing.JLabel();
        progressBar = new javax.swing.JProgressBar();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu2 = new javax.swing.JMenu();
        generateMenuItem = new javax.swing.JMenuItem();
        SaveMenuItem = new javax.swing.JMenuItem();
        ExitMenuItem = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        toggleGapMenuItem = new javax.swing.JMenuItem();

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("com/github/fhirschmann/clozegen/gui/Bundle"); // NOI18N
        jMenu1.setText(bundle.getString("Main.jMenu1.text")); // NOI18N

        jMenuItem1.setText(bundle.getString("Main.jMenuItem1.text")); // NOI18N

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(bundle.getString("Main.jPanel1.border.title"))); // NOI18N

        pane.setText(bundle.getString("Main.pane.text")); // NOI18N
        jScrollPane2.setViewportView(pane);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 436, Short.MAX_VALUE)
                .addContainerGap())
        );

        statusPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));

        statusMessage.setText(bundle.getString("Main.statusMessage.text")); // NOI18N

        javax.swing.GroupLayout statusPanelLayout = new javax.swing.GroupLayout(statusPanel);
        statusPanel.setLayout(statusPanelLayout);
        statusPanelLayout.setHorizontalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addComponent(statusMessage, javax.swing.GroupLayout.DEFAULT_SIZE, 388, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        statusPanelLayout.setVerticalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(statusMessage)
                    .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jMenu2.setText(bundle.getString("Main.jMenu2.text")); // NOI18N

        generateMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.CTRL_MASK));
        generateMenuItem.setText(bundle.getString("Main.generateMenuItem.text")); // NOI18N
        generateMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateMenuItemActionPerformed(evt);
            }
        });
        jMenu2.add(generateMenuItem);

        SaveMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        SaveMenuItem.setText(bundle.getString("Main.SaveMenuItem.text")); // NOI18N
        SaveMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveMenuItemActionPerformed(evt);
            }
        });
        jMenu2.add(SaveMenuItem);

        ExitMenuItem.setText(bundle.getString("Main.ExitMenuItem.text")); // NOI18N
        ExitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitMenuItemActionPerformed(evt);
            }
        });
        jMenu2.add(ExitMenuItem);

        jMenuBar1.add(jMenu2);

        jMenu3.setText(bundle.getString("Main.jMenu3.text")); // NOI18N

        toggleGapMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_T, java.awt.event.InputEvent.CTRL_MASK));
        toggleGapMenuItem.setText(bundle.getString("Main.toggleGapMenuItem.text")); // NOI18N
        toggleGapMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toggleGapMenuItemActionPerformed(evt);
            }
        });
        jMenu3.add(toggleGapMenuItem);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(statusPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(statusPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void ExitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_ExitMenuItemActionPerformed

    private void generateMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateMenuItemActionPerformed
        final ClozeTestGenerator generator = new ClozeTestGenerator();
        final LoadDialog jd = new LoadDialog(this, true);
        int returnCode = jd.showLoadDialog();

        if (returnCode == 0) {
            pane.setLanguage(jd.getSelectedLanguage());
            setIsWorking(true, "Please wait while your cloze test is being generated.");

            SwingWorker<String, Void> worker = new SwingWorker<String, Void>() {
                @Override
                protected String doInBackground() throws Exception {
                    generator.activate(jd.getSelectedGenerators());
                    return generator.run(jd.getSelectedFile(), jd.getSelectedLanguage());
                }

                @Override
                protected void done() {
                    try {
                        pane.setText(get());
                        setIsWorking(false, "Generation process completed.");
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Main.class.getName()).
                                log(Level.SEVERE, null, ex);
                    } catch (ExecutionException ex) {
                        Logger.getLogger(Main.class.getName()).
                                log(Level.SEVERE, null, ex);
                    }
                }
            };
            worker.execute();
        }
    }//GEN-LAST:event_generateMenuItemActionPerformed

    private void toggleGapMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toggleGapMenuItemActionPerformed
        pane.toggleGap();
    }//GEN-LAST:event_toggleGapMenuItemActionPerformed

    private void SaveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveMenuItemActionPerformed
        JFileChooser fc = new JFileChooser();
        FileFilterUtils.setOutputFileFilter(fc);
        int returnVal = fc.showSaveDialog(this);
        if (returnVal == 0) {
            final File file = fc.getSelectedFile();
            final String text = pane.getText();

            final Component cmp = this;
            SwingWorker<Void, Void> worker = new SwingWorker<Void, Void>() {
                @Override
                protected Void doInBackground() throws Exception {
                    final ClozeTestGenerator generator = new ClozeTestGenerator();
                    try {
                        JCas jcas = IntermediateFormat.parse(text);
                        jcas.setDocumentLanguage(pane.getLanguage());
                        generator.run(jcas, file.toURI().toURL());
                    } catch (Exception ex) {
                        Utils.error(cmp, ex.getMessage());
                    }
                    return null;
                }
            };
            worker.execute();
        }
    }//GEN-LAST:event_SaveMenuItemActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(final String[] args) {
        /*
         * Set the System look and feel.
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(
                    java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(
                    java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(
                    java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(
                    java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem ExitMenuItem;
    private javax.swing.JMenuItem SaveMenuItem;
    private javax.swing.JMenuItem generateMenuItem;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private com.github.fhirschmann.clozegen.gui.ClozeTestPane pane;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JLabel statusMessage;
    private javax.swing.JPanel statusPanel;
    private javax.swing.JMenuItem toggleGapMenuItem;
    // End of variables declaration//GEN-END:variables
}
